/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Wechat;

import java.io.*;                   //For input/output operations
import java.net.*;                  //For networking
import java.util.Vector;            //thread safe list to store clients
import java.util.concurrent.atomic.AtomicInteger;   //used for increment, naming clients
import java.util.logging.Level;    
import java.util.logging.Logger;
import javax.swing.SwingUtilities;



/**
 *
 * @author LENOVO
 */
public class Server extends javax.swing.JFrame {

    static ServerSocket ss;
    // Listens for incoming connections.
    static Vector<ClientHandler> clients = new Vector<>();
    //Stores active ClientHandler threads
    private static final AtomicInteger clientCounter = new AtomicInteger(0);
    //Generates unique client names
    private static final java.util.logging.Logger logger = Logger.getLogger(Server.class.getName());

    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        TextField = new javax.swing.JTextField();
        Send = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        Send.setText("Send");
        Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Server");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Send, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextField)
                    .addComponent(Send, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //GUI Setup built using Swing
    //It contains TextArea,TextField,Send button, Label
    private void SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendActionPerformed
         String msg = TextField.getText();  //Read the messages from the TextField
         if (containsSpecialChars(msg)) {   //Checks for special characters
        TextArea.append("\nError: Message contains invalid special characters");
        TextField.setText("");
        return;
    }
       
        appendMessage("Server: " + msg); 
        //Display the message on Server GUI
        clients.forEach((client) -> {
            try {
                client.sendMessage("Server: " + msg);   
                //Broadcasts the message to all connected clients
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Error sending message to client", e);
            }
        });
        TextField.setText("");
    }
    public static void appendMessage(String msg) {      //Ensures that messages are appended to the TextArea
        SwingUtilities.invokeLater(() -> {
        if (TextArea.getDocument().getLength() > 0 && 
            !TextArea.getText().endsWith("\n")) {
            TextArea.append("\n");
        }
        //Adds a newline character, ensuring messages appear on separate lines.
        TextArea.append(msg);
        TextArea.setCaretPosition(TextArea.getDocument().getLength());
        });
     // TODO add your handling code here:
    }//GEN-LAST:event_SendActionPerformed
    
    private void TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldActionPerformed

  

    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("empty-statement")
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, null, e);
        }

        java.awt.EventQueue.invokeLater(() -> {
            Server s = new Server();   // create the GUI
            s.setVisible(true);
            // start server socket in a background thread AFTER GUI is ready
            new Thread(() -> s.startServer()).start();
        });
    }

  public void startServer() {
        try {
            ss = new ServerSocket(5050);
            //Listens for client on port 5050
            appendMessage("Active. Waiting for clients...");
            while (true) {
                Socket s = ss.accept();
                String clientName = "Client" + clientCounter.incrementAndGet();
                ClientHandler clientHandler = new ClientHandler(s, clientName);
                clients.add(clientHandler);
                clientHandler.start();
                appendMessage(clientName + " connected from " + s.getInetAddress().getHostAddress());
                //Logs the client's connection details in the server's TextArea.
            }
            //This portion of condition adds clients with their unique names 
            //Client handler handles these multiple clients to broadcast
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Server error", e);
        }
    }

    private static boolean containsSpecialChars(String input) {
    String specialChars = "!@#$%^&*()_+}{:\"<>?|~";
    //Checks if the input string contains any predefined special characters.
    for (int i = 0; i < input.length(); i++) {
        if (specialChars.indexOf(input.charAt(i)) != -1) {
            return true;
        }
        //Returns true if any special character is found
        //Its used to detect them 
    }
    return false;   //Incase of false, no error will be displayed
}
    static class ClientHandler extends Thread {    
    //This class is used to handle communication
    //With a single client in a separate thread
        private Socket socket;          // client connection.
        private DataInputStream dis;    // stream to receive messages from the client.  
        private DataOutputStream dout;  //stream to send messages to the client.
        private String clientName;      // Unique name for the clients

        public ClientHandler(Socket socket, String name) {
            this.socket = socket;
            this.clientName = name;
            //Sets the socket and client name.
            try {
                dis = new DataInputStream(socket.getInputStream());
                dout = new DataOutputStream(socket.getOutputStream());
                //Initializes input and output streams for communication
                dout.writeUTF("YOUR_NAME:" + clientName);
                //Display name of client who send the message
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Error initializing client handler", e);
            }
        }

        @Override
public void run() {
            try
            //Loop to keep reading messages from the clients.
            {                                             
                while (true) {
                    String msgin = dis.readUTF();       // reads a message from the clients
                    if (msgin.equalsIgnoreCase("exit")) {
                        appendMessage(clientName + " Lost");
                        //If the client sends exits, a message is shown.
                        break;
                    }
                    
                    if (containsSpecialChars(msgin))
                    //Checks for special characters
                    {
                        String errorMsg = "Error: Message contains invalid characters";
                        //Sends an error to the client
                        this.sendMessage(errorMsg);
                        appendMessage("Cant recieve message from " + clientName + "\nReason: Special characters");
                        //Shows an error on the server UI.
                        continue;
                        //Skips the rest of the loop
                    }
                    
                    String formattedMsg = clientName + ": " + msgin;
                    appendMessage(formattedMsg);
                    broadcastMessage(formattedMsg);     //Sends it to all other clients
                }
            } catch (IOException e) {
                appendMessage(clientName + " lost connection");
                //If any error occurs "client disconnected" message is displayed
            } finally {
                try {
                    clients.remove(this);       //Removes the client from the clients list
                    dis.close();
                    dout.close();
                    socket.close();
                } catch (IOException ex) {
                    logger.log(Level.SEVERE, "Error closing connection", ex);
                }
            }
        }


        public void sendMessage(String msg) throws IOException {
            dout.writeUTF(msg);
        }

        private void broadcastMessage(String msg) {
    clients.stream()
        .filter(client -> client != this)
        .forEach(client -> {
            try {
                // Adds newline to ensure separation
                client.sendMessage("\n" + msg);
            } catch (IOException e) {
                logger.log(Level.WARNING, "Failed to send message", e);
            }
        });
}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Send;
    private static javax.swing.JTextArea TextArea;
    private javax.swing.JTextField TextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
